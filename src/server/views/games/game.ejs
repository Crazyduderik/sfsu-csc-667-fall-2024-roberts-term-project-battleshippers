<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Battleshippers</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            background-color: #e6f2ff;
        }

        .game-board {
            display: flex;
            justify-content: center;
            gap: 50px;
            margin: 20px auto;
        }

        .player-board {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .grid-wrapper {
            display: grid;
            grid-template-columns: 30px repeat(8, 40px);
            grid-template-rows: 30px repeat(8, 40px);
            gap: 2px;
            width: max-content;
            border: 2px solid black;
            background-color: #b3d9ff;
        }

        .label {
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            color: #333;
        }

        .grid-cell {
            border: 1px solid #000;
            width: 40px;
            height: 40px;
            background-color: #87cefa;
            position: relative;
            cursor: pointer;
        }

        .grid-cell.hit {
            background-color: red !important;
        }

        .grid-cell.miss {
            background-color: lightgray;
        }

        .grid-cell.occupied {
            background-color: blue;
        }

        #game-status {
            font-size: 1.2em;
            margin-top: 20px;
        }

        .score-board {
            margin: 20px;
        }

        #rematch-button {
            display: none;
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1em;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
        }

        #rematch-button:hover {
            background-color: #45a049;
        }

        .rematch-container {
            margin-top: 30px;
            display: flex;
            justify-content: center;
        }
    </style>
</head>
<body>
    <h1>Battleshippers</h1>
    <p id="game-status">Player 1: Place your boats!</p>
    <div class="score-board">
        <span>Player 1 Score: <span id="player1-score">0</span></span> | 
        <span>Player 2 Score: <span id="player2-score">0</span></span>
    </div>
    <div class="game-board">
        <div class="player-board">
            <h2>Player 1</h2>
            <div id="player1-grid" class="grid-wrapper"></div>
        </div>
        <div class="player-board">
            <h2>Player 2</h2>
            <div id="player2-grid" class="grid-wrapper"></div>
        </div>
    </div>
    <div class="rematch-container">
        <button id="rematch-button">Rematch</button>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const player1Grid = document.getElementById("player1-grid");
            const player2Grid = document.getElementById("player2-grid");
            const gameStatus = document.getElementById("game-status");
            const player1ScoreDisplay = document.getElementById("player1-score");
            const player2ScoreDisplay = document.getElementById("player2-score");
            const rematchButton = document.getElementById("rematch-button");

            let currentPlayer = 1;
            let gamePhase = "placement"; // "placement" or "battle"
            let player1Boats = [];
            let player2Boats = [];
            const boatSizes = [3, 2, 1];
            let player1Hits = 0;
            let player2Hits = 0;

            // Initialize grid with labels
            const initializeGrid = (grid) => {
                grid.innerHTML = ""; // Clear existing grid content
                const emptyCorner = document.createElement("div");
                emptyCorner.classList.add("label");
                grid.appendChild(emptyCorner);

                // Create column labels
                for (let col = 0; col < 8; col++) {
                    const colLabel = document.createElement("div");
                    colLabel.classList.add("label");
                    colLabel.textContent = String.fromCharCode(65 + col);
                    grid.appendChild(colLabel);
                }

                // Create row labels and grid cells
                for (let row = 0; row < 8; row++) {
                    const rowLabel = document.createElement("div");
                    rowLabel.classList.add("label");
                    rowLabel.textContent = row + 1;
                    grid.appendChild(rowLabel);

                    for (let col = 0; col < 8; col++) {
                        const cell = document.createElement("div");
                        cell.classList.add("grid-cell");
                        cell.dataset.row = row;
                        cell.dataset.col = col;
                        grid.appendChild(cell);
                    }
                }
            };

            // Reset game state
            const resetGame = () => {
                currentPlayer = 1;
                gamePhase = "placement";
                player1Boats = [];
                player2Boats = [];
                player1Hits = 0;
                player2Hits = 0;

                // Reset scores
                player1ScoreDisplay.textContent = "0";
                player2ScoreDisplay.textContent = "0";

                // Reset grids
                initializeGrid(player1Grid);
                initializeGrid(player2Grid);

                // Reset game status
                gameStatus.textContent = "Player 1: Place your boats!";

                // Hide rematch button
                rematchButton.style.display = "none";

                // Enable Player 1 to place boats
                enableBoatPlacement(1);
            };

            // Enable boat placement
            const enableBoatPlacement = (player) => {
                const grid = player === 1 ? player1Grid : player2Grid;
                const boats = player === 1 ? player1Boats : player2Boats;

                grid.querySelectorAll(".grid-cell").forEach((cell) => {
                    cell.onclick = () => handleBoatPlacement(cell, player, boats);
                });
            };

            // Handle boat placement
            const handleBoatPlacement = (cell, player, boats) => {
                const row = parseInt(cell.dataset.row);
                const col = parseInt(cell.dataset.col);
                const grid = player === 1 ? player1Grid : player2Grid;

                if (boats.length < boatSizes.length) {
                    const size = boatSizes[boats.length];
                    if (isPlacementValid(row, col, size, grid)) {
                        placeBoat(row, col, size, grid);
                        boats.push({ row, col, size });

                        if (boats.length === boatSizes.length) {
                            if (player === 1) {
                                currentPlayer = 2;
                                gameStatus.textContent = "Player 2: Place your boats!";
                                enableBoatPlacement(2); // Enable Player 2's boat placement
                            } else {
                                gamePhase = "battle";
                                currentPlayer = 1;
                                gameStatus.textContent = "Player 1's turn to attack!";
                                enableBattleMode(); // Transition to battle phase
                            }
                        }
                    } else {
                        alert("Invalid placement!");
                    }
                }
            };

            const isPlacementValid = (row, col, size, grid) => {
                for (let i = 0; i < size; i++) {
                    const cell = grid.querySelector(`[data-row='${row}'][data-col='${col + i}']`);
                    if (!cell || cell.classList.contains("occupied")) return false;
                }
                return true;
            };

            const placeBoat = (row, col, size, grid) => {
                for (let i = 0; i < size; i++) {
                    const cell = grid.querySelector(`[data-row='${row}'][data-col='${col + i}']`);
                    if (cell) cell.classList.add("occupied");
                }
            };

            // Enable battle mode
            const enableBattleMode = () => {
                const grids = [player1Grid, player2Grid];
                grids.forEach((grid, index) => {
                    const player = index + 1;
                    grid.querySelectorAll(".grid-cell").forEach((cell) => {
                        cell.onclick = () => {
                            if (player !== currentPlayer) handleTurn(cell, player);
                        };
                    });
                });
            };

            const handleTurn = (cell, player) => {
                if (cell.classList.contains("hit") || cell.classList.contains("miss")) {
                    alert("You already guessed this cell!");
                    return;
                }

                if (cell.classList.contains("occupied")) {
                    cell.classList.add("hit");
                    if (currentPlayer === 1) {
                        player1Hits++;
                        player1ScoreDisplay.textContent = player1Hits;
                    } else {
                        player2Hits++;
                        player2ScoreDisplay.textContent = player2Hits;
                    }

                    if (
                        (currentPlayer === 1 && player1Hits === 6) ||
                        (currentPlayer === 2 && player2Hits === 6)
                    ) {
                        gameStatus.textContent = `Player ${currentPlayer} wins!`;
                        rematchButton.style.display = "block";
                        return;
                    }

                    gameStatus.textContent = `Player ${currentPlayer} hits!`;
                } else {
                    cell.classList.add("miss");
                    currentPlayer = currentPlayer === 1 ? 2 : 1;
                    gameStatus.textContent = `Player ${currentPlayer}'s turn!`;
                }
            };

            // Initialize grids and start the game
            initializeGrid(player1Grid);
            initializeGrid(player2Grid);
            enableBoatPlacement(1); // Start with Player 1's boat placement

            // Attach rematch button functionality
            rematchButton.onclick = resetGame;
        });
    </script>
</body>
</html>

